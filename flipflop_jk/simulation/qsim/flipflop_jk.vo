// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 20.1.1 Build 720 11/11/2020 SJ Lite Edition"

// DATE "03/27/2022 13:06:43"

// 
// Device: Altera 5CGXFC7C7F23C8 Package FBGA484
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module flipflop_jk (
	j,
	k,
	clk,
	q,
	q_bar);
input 	j;
input 	k;
input 	clk;
output 	q;
output 	q_bar;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \q~output_o ;
wire \q_bar~output_o ;
wire \clk~input_o ;
wire \k~input_o ;
wire \j~input_o ;
wire \a[2]~1_combout ;
wire \q~1_combout ;
wire \q_bar~0_combout ;


cyclonev_io_obuf \q~output (
	.i(!\q~1_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\q~output_o ),
	.obar());
// synopsys translate_off
defparam \q~output .bus_hold = "false";
defparam \q~output .open_drain_output = "false";
defparam \q~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \q_bar~output (
	.i(\q_bar~0_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\q_bar~output_o ),
	.obar());
// synopsys translate_off
defparam \q_bar~output .bus_hold = "false";
defparam \q_bar~output .open_drain_output = "false";
defparam \q_bar~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_ibuf \clk~input (
	.i(clk),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\clk~input_o ));
// synopsys translate_off
defparam \clk~input .bus_hold = "false";
defparam \clk~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \k~input (
	.i(k),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\k~input_o ));
// synopsys translate_off
defparam \k~input .bus_hold = "false";
defparam \k~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \j~input (
	.i(j),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\j~input_o ));
// synopsys translate_off
defparam \j~input .bus_hold = "false";
defparam \j~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb \a[2]~1 (
// Equation(s):
// \a[2]~1_combout  = ( \j~input_o  & ( (!\clk~input_o  & (((\a[2]~1_combout )))) # (\clk~input_o  & (!\q~1_combout  & ((\k~input_o ) # (\a[2]~1_combout )))) ) ) # ( !\j~input_o  & ( ((!\q~1_combout  & (\clk~input_o  & \k~input_o ))) # (\a[2]~1_combout ) ) )

	.dataa(!\q~1_combout ),
	.datab(!\clk~input_o ),
	.datac(!\a[2]~1_combout ),
	.datad(!\k~input_o ),
	.datae(!\j~input_o ),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\a[2]~1_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \a[2]~1 .extended_lut = "off";
defparam \a[2]~1 .lut_mask = 64'h0F2F0E2E0F2F0E2E;
defparam \a[2]~1 .shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb \q~1 (
// Equation(s):
// \q~1_combout  = (!\clk~input_o  & ((\a[2]~1_combout ))) # (\clk~input_o  & (\q~1_combout ))

	.dataa(!\q~1_combout ),
	.datab(!\clk~input_o ),
	.datac(!\a[2]~1_combout ),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\q~1_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \q~1 .extended_lut = "off";
defparam \q~1 .lut_mask = 64'h1D1D1D1D1D1D1D1D;
defparam \q~1 .shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb \q_bar~0 (
// Equation(s):
// \q_bar~0_combout  = ((!\clk~input_o  & \a[2]~1_combout )) # (\q~1_combout )

	.dataa(!\q~1_combout ),
	.datab(!\clk~input_o ),
	.datac(!\a[2]~1_combout ),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\q_bar~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \q_bar~0 .extended_lut = "off";
defparam \q_bar~0 .lut_mask = 64'h5D5D5D5D5D5D5D5D;
defparam \q_bar~0 .shared_arith = "off";
// synopsys translate_on

assign q = \q~output_o ;

assign q_bar = \q_bar~output_o ;

endmodule
